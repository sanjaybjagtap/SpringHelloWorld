# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  build:

    runs-on: ubuntu-latest 
    name: Maven Build and docker image

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    # - name: Build with Maven
    #   run: mvn -B package --file pom.xml

  
    # - name: Check out code into the Go module directory
    #   uses: actions/checkout@v1

    # - name: golangci-lint
    #   uses: reviewdog/action-golangci-lint@v1
    #   with:
    #     github_token: ${{ secrets.github_token }}
    #     level: warning
    #     fail_on_error: true 


    - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=sanjaybjagtap_SpringHelloWorld    

    # - name: ZAP Scan
    #   uses: zaproxy/action-baseline@v0.6.1
    #   with:
    #     #target: 'https://helloworldapp.c-764b793.kyma-stage.shoot.live.k8s-hana.ondemand.com'
    #     target: 'https://web.app-cl.dev.fioneer.com'

  #   - name: Build and push docker image
  #     uses: mr-smithers-excellent/docker-build-push@v5
  #     with:
  #       image: sanjaybjagtap/springhelloworld
  #       tags: latest
  #       registry: docker.io
  #       username: ${{secrets.DOCKERHUB_USERNAME}}
  #       password: ${{secrets.DOCKERHUB_PASSWORD}}    

  # deploy-hellpworld:
  #   runs-on: ubuntu-latest
  #   name: deploy springhelloworld on kyma
  #   needs: [build]
  #   steps:
  #     - name: checkout the code
  #       uses: actions/checkout@v2

  #     - name: Kubernetes set context
  #       uses: Azure/k8s-set-context@v1.1
  #       with:
  #         cluster-type: generic
  #         method: kubeconfig
  #         kubeconfig: ${{ secrets.KUBECONFIG }}


  #     - name: Deploy to Kyma
  #       run: |
  #         kubectl apply -f kyma/helloworld.yaml -n githubactiontest


  




    # - name: Upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: SpringHelloWorld
    #     path: ./target/*jar
    #     if-no-files-found: error
    #     retention-days: 3

  
    # - name: Checkout the artifact
    #   uses: actions/checkout@v2

    # - name: Download the artifact
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: SpringHelloWorld
    #     path: ./target

    # - name: Display artifact
    #   run:  ls -R
    #   working-directory: ./target

    # - name: Docker build
    #   run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/bookapp:latest .

    # - name: Docker login
    #   uses: docker/login-action@v1
    #   with:
    #     registry: docker.io
    #     username: ${{secrets.DOCKERHUB_USERNAME}}
    #     password: ${{secrets.DOCKERHUB_PASSWORD}}


    # - name: Docker push
    #   run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/bookapp:latest



